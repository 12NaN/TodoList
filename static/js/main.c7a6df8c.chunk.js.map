{"version":3,"sources":["components/TodoItems.js","components/TodoList.js","App.js","serviceWorker.js","index.js"],"names":["TodoItems","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","createTasks","bind","assertThisInitialized","key","delete","item","_this2","react_default","a","createElement","onClick","text","listItems","entries","map","className","react_flip_move_es","duration","easing","Component","TodoList","state","items","addItem","deleteItem","e","itemArray","_inputElement","value","unshift","Date","now","setState","console","log","preventDefault","filteredItems","filter","onSubmit","ref","placeholder","type","TodoItems_TodoItems","App","TodoList_TodoList","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4QAIqBA,oBACnB,SAAAA,EAAYC,GAAM,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IAChBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,YAAcP,EAAKO,YAAYC,KAAjBP,OAAAQ,EAAA,EAAAR,QAAAQ,EAAA,EAAAR,CAAAD,KAFHA,sEAKXU,GACLP,KAAKJ,MAAMY,OAAOD,uCAGRE,GAAK,IAAAC,EAAAV,KACf,OAAOW,EAAAC,EAAAC,cAAA,MAAIC,QAAS,kBAAKJ,EAAKF,OAAOC,EAAKF,MAAMA,IAAKE,EAAKF,KAAME,EAAKM,uCAIrE,IACIC,EADchB,KAAKJ,MAAMqB,QACDC,IAAIlB,KAAKI,aAErC,OACEO,EAAAC,EAAAC,cAAA,MAAIM,UAAU,WACdR,EAAAC,EAAAC,cAACO,EAAA,EAAD,CAAUC,SAAU,IAAKC,OAAO,YAC3BN,WArB4BO,cCAlBC,cACnB,SAAAA,EAAY5B,GAAM,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAwB,IAChB3B,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAA0B,GAAArB,KAAAH,KAAMJ,KAED6B,MAAQ,CACXC,MAAO,IAGT7B,EAAK8B,QAAU9B,EAAK8B,QAAQtB,KAAbP,OAAAQ,EAAA,EAAAR,QAAAQ,EAAA,EAAAR,CAAAD,KACfA,EAAK+B,WAAa/B,EAAK+B,WAAWvB,KAAhBP,OAAAQ,EAAA,EAAAR,QAAAQ,EAAA,EAAAR,CAAAD,KARFA,uEAWVgC,GACN,IAAIC,EAAY9B,KAAKyB,MAAMC,MAEM,KAA7B1B,KAAK+B,cAAcC,QACrBF,EAAUG,QAAQ,CAChBlB,KAAMf,KAAK+B,cAAcC,MACzBzB,IAAK2B,KAAKC,QAGZnC,KAAKoC,SAAS,CACZV,MAAOI,IAGT9B,KAAK+B,cAAcC,MAAQ,IAG7BK,QAAQC,IAAIR,GAEZD,EAAEU,oDAGOhC,GACT,IAAIiC,EAAgBxC,KAAKyB,MAAMC,MAAMe,OAAO,SAAShC,GACnD,OAAQA,EAAKF,MAAQA,IAGvBP,KAAKoC,SAAS,CACZV,MAAOc,qCAIH,IAAA9B,EAAAV,KACN,OACEW,EAAAC,EAAAC,cAAA,OAAKM,UAAU,gBACbR,EAAAC,EAAAC,cAAA,OAAKM,UAAU,UACbR,EAAAC,EAAAC,cAAA,yBACAF,EAAAC,EAAAC,cAAA,wDACAF,EAAAC,EAAAC,cAAA,QAAM6B,SAAU1C,KAAK2B,SACnBhB,EAAAC,EAAAC,cAAA,SAAO8B,IAAK,SAAC/B,GAAD,OAAOF,EAAKqB,cAAgBnB,GAAGgC,YAAY,eAEvDjC,EAAAC,EAAAC,cAAA,UAAQgC,KAAK,UAAb,SAGJlC,EAAAC,EAAAC,cAACiC,EAAD,CAAW7B,QAAWjB,KAAKyB,MAAMC,MACtBlB,OAAUR,KAAK4B,qBAxDIL,aCYvBwB,0LATX,OACEpC,EAAAC,EAAAC,cAAA,OAAKM,UAAU,OACbR,EAAAC,EAAAC,cAACmC,EAAD,cAJUzB,cCOE0B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO5C,EAAAC,EAAAC,cAAC2C,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.c7a6df8c.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport FlipMove from 'react-flip-move';\r\nimport \"./TodoList.css\";\r\n\r\nexport default class TodoItems extends Component{\r\n  constructor(props){\r\n    super(props);\r\n    this.createTasks = this.createTasks.bind(this);\r\n  }\r\n\r\n  delete(key){\r\n    this.props.delete(key);\r\n  }\r\n\r\n  createTasks(item){\r\n    return <li onClick={()=> this.delete(item.key)} key={item.key}>{item.text}</li>\r\n  }\r\n\r\n  render(){\r\n    let todoEntries = this.props.entries;\r\n    let listItems = todoEntries.map(this.createTasks);\r\n\r\n    return(\r\n      <ul className=\"theList\">\r\n      <FlipMove duration={250} easing=\"ease-out\">\r\n          {listItems}\r\n       </FlipMove>\r\n      </ul>\r\n    );\r\n  }\r\n};\r\n","import React, {Component} from 'react';\r\nimport TodoItems from \"./TodoItems\";\r\nimport \"./TodoList.css\";\r\n\r\nexport default class TodoList extends Component{\r\n  constructor(props){\r\n    super(props);\r\n\r\n    this.state = {\r\n      items: []\r\n    };\r\n\r\n    this.addItem = this.addItem.bind(this);\r\n    this.deleteItem = this.deleteItem.bind(this);\r\n  }\r\n\r\n  addItem(e){\r\n    let itemArray = this.state.items;\r\n\r\n    if (this._inputElement.value !== \"\"){\r\n      itemArray.unshift({\r\n        text: this._inputElement.value,\r\n        key: Date.now()\r\n      });\r\n\r\n      this.setState({\r\n        items: itemArray\r\n      });\r\n\r\n      this._inputElement.value = \"\";\r\n    }\r\n\r\n    console.log(itemArray);\r\n\r\n    e.preventDefault();\r\n  }\r\n\r\n  deleteItem(key){\r\n    let filteredItems = this.state.items.filter(function(item){\r\n      return (item.key !== key);\r\n    });\r\n\r\n    this.setState({\r\n      items: filteredItems\r\n    });\r\n  }\r\n\r\n  render(){\r\n    return(\r\n      <div className=\"todoListMain\">\r\n        <div className=\"header\">\r\n          <h1>To Do List </h1>\r\n          <h4> Enter tasks that you need to do below... </h4>\r\n          <form onSubmit={this.addItem}>\r\n            <input ref={(a) => this._inputElement = a} placeholder=\"Enter task\">\r\n            </input>\r\n            <button type=\"submit\">Add</button>\r\n          </form>\r\n        </div>\r\n        <TodoItems entries = {this.state.items}\r\n                   delete = {this.deleteItem} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from 'react';\nimport TodoList from './components/TodoList';\nimport TodoItems from './components/TodoItems';\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <TodoList/>\n\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}